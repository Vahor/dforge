// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

export const commands = {
  async appReady(): Promise<void> {
    return await TAURI_INVOKE("app_ready");
  },
  async createChatWindow(): Promise<void> {
    return await TAURI_INVOKE("create_chat_window");
  },
  async getChatWindowConfig(windowId: string): Promise<ChatTabConfig | null> {
    return await TAURI_INVOKE("get_chat_window_config", {
      windowId,
    });
  },
  async updateChatWindowConfig(
    windowId: string,
    config: ChatTabConfig,
  ): Promise<void> {
    return await TAURI_INVOKE("update_chat_window_config", {
      windowId,
      config,
    });
  },
  async getGlobalConfig(): Promise<NodeConfig> {
    return await TAURI_INVOKE("get_global_config");
  },
  async getLastPacketTimestamp(): Promise<bigint> {
    return await TAURI_INVOKE("get_last_packet_timestamp");
  },
};

export const events = __makeEvents__<{
  chatEvent: ChatEvent;
}>({
  chatEvent: "plugin:tauri-specta:chat-event",
});

/** user-defined types **/

export type ChatEvent = {
  channel: number;
  sender_name: string;
  content: string;
  timestamp: number;
};
export type ChatTabConfig = {
  options: ChatTabOptions;
  filters?: ChatTabFilterTree | null;
  window?: WindowOptions | null;
};
export type ChatTabFilterTree =
  | { and: ChatTabFilterTree[] }
  | { or: ChatTabFilterTree[] }
  | { filter: ChatTabFilterType };
export type ChatTabFilterType =
  | { type: "channel"; value: number }
  | { type: "player"; value: string }
  | { type: "word"; value: string }
  | { type: "item"; value: number };
export type ChatTabOptions = { persistent: boolean; notify: boolean };
export type NetworkConfig = { port: number; interface: string };
export type NodeConfig = { network: NetworkConfig; game_version: Version };
export type Version = { version: string; checkForUpdates: boolean };
export type WindowOptions = { type: WindowType };
export type WindowType = { type: "tab"; value: string } | { type: "window" };

/** tauri-specta globals **/

import { invoke as TAURI_INVOKE } from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: T extends null
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

type __Result__<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>,
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    },
  );
}
